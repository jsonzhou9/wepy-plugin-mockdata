{"version":3,"sources":["../src/index.js"],"names":["c","def","src","dist","filter","RegExp","rule","sourceMap","empty","babelPlugins","setting","Object","assign","op","test","file","next","distRelativePath","relative","process","cwd","sourceFile","join","substring","length","spath","parse","fileContent","readFile","error","res","match","exportCode","mockDataName","replace","jsonFileList","walkJsonFile","dir","mockData","self","forEach","jsonFile","readJsonFile","fileRelativePath","fileKey","mockDataStr","JSON","stringify","e","console","mergeCode","es5Code","transformEs5","name","output","action","code","es6Code","fileName","compileResult","require","transform","presets","plugins","map","sources","Base64","encode","filePath","fileList","walk","files","readdirSync","filename","stats","statSync","isDir","isDirectory","push","readFileSync","err"],"mappings":"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","file":"index.js","sourcesContent":["import path from 'path';\nimport fs from 'fs';\n\nexport default class {\n\n    constructor(c = {}) {\n        const def = {\n            src: 'src', //源文件目录\n            dist: 'dist', //目标文件目录\n            filter: new RegExp('\\w$'),\n            rule: new RegExp('export\\\\sdefault\\\\s([a-zA-Z0-9_]+)'),\n            sourceMap: true,\n            empty: false, // 是否清空，比如不是开发环境的时候，清空mock data的配置\n            babelPlugins: [ // 插件依赖和wepy.config.js中的 compilers.babel.plugins一致\n                'transform-class-properties',\n                'transform-decorators-legacy',\n                'transform-object-rest-spread',\n                'transform-export-extensions',\n            ]\n        };\n\n        this.setting = Object.assign({}, def, c);\n    }\n\n    apply (op) {\n\n        let setting = this.setting;\n\n        //过滤文件\n        if (!setting.filter.test(op.file)) {\n            op.next();\n            return;\n        }\n\n        let distRelativePath = path.relative(process.cwd(), op.file); //目标文件相对路径\n        let sourceFile = path.join(this.setting.src, distRelativePath.substring(this.setting.dist.length)); //对应的源文件路径\n        let spath = path.parse(sourceFile); //源路径解析\n\n        let fileContent = this.readFile(sourceFile, op.error);\n        if(!setting.rule.test(fileContent)){\n            op.next();\n            return;\n        }\n\n        // 匹配导出对象名称\n        let res = fileContent.match(setting.rule);\n        if(!res || !res.length){\n            op.next();\n            return;\n        }\n        let exportCode = res[0];\n        let mockDataName = res[1];\n\n        if (this.setting.empty) { // 非开发环境清空mock data配置\n            fileContent = fileContent.replace(new RegExp(mockDataName + '\\\\s{1,}=\\\\s{1}{[\\\\s\\\\S]+\\\\}'), () => {\n                return `${mockDataName} = {}`;\n            });\n            fileContent = fileContent.replace(exportCode, () => {\n                return 'export default {}';\n            });\n        } else {\n            let jsonFileList = this.walkJsonFile(path.join(process.cwd(), spath.dir)); //所有JSON文件列表\n            let mockData = {};\n            let self = this;\n            jsonFileList.forEach((file) => {\n                let jsonFile = self.readJsonFile(file);\n                if (jsonFile) {\n                    let fileRelativePath = path.relative(path.join(process.cwd(), spath.dir), file);\n                    let fileKey = fileRelativePath.replace('.json','');\n                    mockData[fileKey] = jsonFile;\n                }\n            });\n\n            let mockDataStr = '{}';\n            try {\n                mockDataStr = JSON.stringify(mockData);\n            } catch (e) {\n                console.error('JSON.stringify(mockData) error',e);\n            }\n            let mergeCode = `${mockDataName} = Object.assign(${mockDataName}, ${mockDataStr});`;\n\n            fileContent = fileContent.replace(exportCode, () => {\n                return mergeCode + exportCode;\n            });\n        }\n\n        let es5Code = this.transformEs5(fileContent, spath.name);\n\n        op.output && op.output({\n            action: '合并Mock配置',\n            file: op.file\n        });\n\n        op.code = es5Code;\n        op.next();\n    }\n\n    transformEs5 (es6Code,fileName) {\n        let compileResult = null;\n        let code = es6Code;\n        try{\n            compileResult = require(\"babel-core\").transform(es6Code, {\n                sourceMap: this.setting.sourceMap,\n                presets: [\"env\"],\n                plugins: this.setting.babelPlugins\n            });\n        }catch (e){\n        }\n\n        if(compileResult && compileResult.code){\n            code = compileResult.code;\n            let sourceMap = compileResult.map;\n            if (sourceMap) {\n                sourceMap.sources = [fileName];\n                sourceMap.file = fileName;\n                let Base64 = require('js-base64').Base64;\n                code += `\\r\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,${Base64.encode(JSON.stringify(sourceMap))}`;\n            }\n        }\n        return code;\n    }\n\n    walkJsonFile (filePath) {\n        let fileList = [];\n        let walk = (filePath) => {\n            try {\n                let files = fs.readdirSync(filePath);\n                files.forEach(function(filename){\n                    let file = path.join(filePath, filename);\n                    let stats = fs.statSync(file);\n                    let isDir = stats.isDirectory();\n                    if (isDir) {\n                        walk(file);\n                    } else {\n                        if (/.+\\.json$/.test(file)) { // JSON文件\n                            fileList.push(file);\n                        }\n                    }\n                });\n            } catch (e) {\n                console.error('文件遍历失败', path, e);\n            }\n        };\n        walk(filePath);\n        return fileList;\n    }\n\n    readFile (file,error) {\n        let fileContent = '';\n        try{\n            fileContent = fs.readFileSync(file,'utf8');\n        }catch(e) {\n            error && error({err:'文件读取出错',file:file});\n        }\n        return fileContent;\n    }\n\n    readJsonFile (file) {\n        let fileContent;\n        try{\n            fileContent = JSON.parse(fs.readFileSync(file,'utf8'));\n        }catch(e) {\n            console.error('文件读取失败', file, e);\n        }\n        return fileContent;\n    }\n}"]}